ScrollScreen subroutine
; update scroll position (must be done after VRAM updates)
	inc scroll_pos	; increment low byte
        bne .noinc	; Z flag set if wrapped to 0
        inc scroll_pos + 1 	; increment high byte
.noinc:
; store X and Y scroll position
        lda scroll_pos	; A -> low byte
        sta PPU_SCROLL	; set horiz scroll
        lda #0		; A -> zero
        sta PPU_SCROLL	; set vert scroll
; store 8th bit into name table selector
; name table A or B ($2000 or $2400)
	lda scroll_pos + 1	; load high byte
        and #1		; select its low bit
	ora #CTRL_NMI	; set rest of bits
        sta PPU_CTRL
        
	rts
        


SetPalette subroutine
	PPU_SETADDR $3f00
        ldy #0
.loop:
	lda Palette,y	; lookup byte in constant data -> palette
	sta PPU_DATA
        iny		
        cpy #32		
	bne .loop	; repeat until Y is 32	
        rts			



FillVRAM subroutine
	PPU_SETADDR $2000
        lda #<Level
        sta temp
        lda #>Level
        sta temp + 1
        ldy #0
        ldx #8
.startLoad:
        cpx #0
        beq .finished
        dex
.loadLevel:
	clc
	lda (temp),y
        sta PPU_DATA
        iny
        cpy #0
        bne .loadLevel
        inc temp + 1
        jmp .startLoad
.finished:
        rts
        		
        

	;align $100
Palette:
	hex 2a		;backgroundassembly
	hex 02122200	;background 0
        hex 02122200	;background 1
        hex 02112200	;background 2
        hex 02122200	;background 3
        hex 19293900	;sprite 0
        hex 02122200	;sprite 1
        hex 21212121	;sprite 2
        hex 33333333	;sprite 3


   	
